

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution{
    public:
    int getLeftChild(int i){
        return 2*i + 1;
    }
    
    int getRightChild(int i){
        return 2*i + 2;
    }
    bool isMaxHeap(int arr[], int n)
    {
        // Your code goes here
        for(int i=0; i<n; i++){
            int lChild = getLeftChild(i);
            int rChild = getRightChild(i);
            if(lChild<n && arr[i] < arr[lChild])
                return false;
            if(rChild<n && arr[i] < arr[rChild])
                return false;
        }
        return true;
    }
};

//{ Driver Code Starts.
int main() {
    
    int t;
    cin >> t;
    while(t--)
    {
       int n;
       cin >> n;
       int a[4*n]={0};
       for(int i =0;i<n;i++){
           cin >> a[i];
       }
       Solution ob;
       cout<<ob.isMaxHeap(a, n)<<endl;
        
    
cout << "~" << "\n";
}
    return 0;
}

// } Driver Code Ends


time complexity: O(n)
space complexity: O(1)


### **Time and Space Complexity Analysis**

#### **Time Complexity: O(n)**
- The loop iterates over each node in the array exactly once.
- For each node, it calculates the indices of its left and right children and performs comparisons.
- Since the loop runs for all `n` nodes, the time complexity is **O(n)**.

---

#### **Space Complexity: O(1)**
- The algorithm uses a constant amount of extra space:
  - Variables `lChild` and `rChild` are reused in each iteration.
  - No additional data structures are used.
- Hence, the space complexity is **O(1)**.

---

### **Summary**
- **Time Complexity**: **O(n)** (Linear, as each node is processed once)
- **Space Complexity**: **O(1)** (Constant, as no extra space is used)