
class Solution
{
    priority_queue<int, vector<int>, greater<int>> greaterHalf;
    priority_queue<int> lowerHalf;
    public:
    //Function to insert heap.
    void insertHeap(int &num)
    {
        if(!lowerHalf.empty() && num<= lowerHalf.top())
            lowerHalf.push(num);
        else
            greaterHalf.push(num);
            
        balanceHeaps();
        
    }
    
    //Function to balance heaps.
    void balanceHeaps()
    {
        // Balanced the two heaps
        if(lowerHalf.size() < greaterHalf.size()){
            lowerHalf.push(greaterHalf.top());
            greaterHalf.pop();
        }
        else if(greaterHalf.size() < lowerHalf.size()){
            greaterHalf.push(lowerHalf.top());
            lowerHalf.pop();
        }
    }
    
    //Function to return Median.
    double getMedian()
    {
        int lSize = lowerHalf.size();
        int gSize = greaterHalf.size();
        if(lSize == gSize){
            return (lowerHalf.top() + greaterHalf.top()) /2.0;
        }

        if(lSize > gSize)   return lowerHalf.top();

        return greaterHalf.top();
        
    }
};

