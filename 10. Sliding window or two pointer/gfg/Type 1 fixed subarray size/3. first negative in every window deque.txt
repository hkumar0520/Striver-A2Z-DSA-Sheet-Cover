
https://www.geeksforgeeks.org/problems/first-negative-integer-in-every-window-of-size-k3345/1?page=1&category=sliding-window&company=Amazon,Microsoft,Flipkart,Adobe,Google,Samsung,Paytm,Morgan%20Stanley,D-E-Shaw,Wipro,Uber,Infosys,Atlassian&difficulty=Medium&sortBy=submissions

class Solution {
  public:
    vector<int> FirstNegativeInteger(vector<int>& arr, int k) {
        // write code here
        
        deque<int> dq;
        vector<int> ans;
        int n = arr.size();
        
        for(int i = 0; i<n; i++){
            
            if(!dq.empty() && (dq.front() == (i-k)) )
                dq.pop_front();
                
            if(arr[i] < 0)
                dq.push_back(i);
                
            if(i >= (k-1)){
                if(dq.size() == 0)
                    ans.push_back(0);
                else
                    ans.push_back(arr[dq.front()]);
            }
        }
        
        return ans;
    }
};

### Time Complexity

1. **Outer Loop (Array Iteration):**
   - The loop runs for all \( n \) elements of the array. Each element is processed exactly once.
   - **Time:** \( O(n) \).

2. **Deque Operations:**
   - Each element is added to and removed from the deque at most once.
   - Operations on the deque (push, pop, and access) are \( O(1) \) each.
   - **Time:** \( O(n) \).

3. **Result Vector Update:**
   - For each window (starting from the \( k \)-th element), a constant-time operation is performed to update the result vector.
   - The number of windows is \( n - k + 1 \).
   - **Time:** \( O(n) \).

**Total Time Complexity:**  
\[ O(n) \]

---

### Space Complexity

1. **Deque:**
   - The deque stores indices of array elements. At most, it holds \( k \) indices at any given time (the size of the sliding window).
   - **Space:** \( O(k) \).

2. **Result Vector:**
   - The result vector stores one value for each of the \( n - k + 1 \) windows.
   - **Space:** \( O(n) \).

3. **Auxiliary Variables:**
   - A constant amount of space is used for variables like `i`, `n`, etc.
   - **Space:** \( O(1) \).

**Total Space Complexity:**  
\[ O(k + n) \]

---

### Final Complexity Summary

| **Operation**       | **Time Complexity** | **Space Complexity** |
|----------------------|---------------------|-----------------------|
| Array Iteration      | \( O(n) \)         | \( O(1) \)           |
| Deque Operations     | \( O(n) \)         | \( O(k) \)           |
| Result Storage       | \( O(1) \)         | \( O(n) \)           |
| **Total**            | \( O(n) \)         | \( O(k + n) \)       |