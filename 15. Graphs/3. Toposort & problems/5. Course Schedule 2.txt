// bfs 


class Solution {
public:
    void getIndegree(vector<int>& indegree, vector<vector<int>>& prerequisites)
    {
        for(auto edge: prerequisites)
        {
            // b->a
            int a = edge[0], b = edge[1];
            indegree[a]++;
        }
    }
    vector<int> bfs(vector<int>& indegree, vector<vector<int>>& prerequisites)
    {
        int numCourses = indegree.size();
        queue<int> qtraverse;
        for(int i=0;i<numCourses;i++)
        {
            if(indegree[i] == 0)
                qtraverse.push(i);
        }
        vector<int> ans;
        while(!qtraverse.empty())
        {
            int node = qtraverse.front();
            qtraverse.pop();

            ans.push_back(node);
            for(auto edge: prerequisites)
            {
                int a = edge[0], b = edge[1];
                if(b == node)
                {
                    indegree[a]--;
                    if(indegree[a] == 0)
                    {
                        qtraverse.push(a);
                    }
                }
            }
        }
        return ans.size() == numCourses? ans : vector<int>{};
    }

    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> indegree(numCourses, 0);
        getIndegree(indegree, prerequisites);

        return bfs(indegree, prerequisites);
    }
};

################################################################################################

// dfs 


class Solution {
public:

    bool dfs(int node, vector<int>& vis, vector<vector<int>>& prerequisites, vector<int>& ans)
    {
        vis[node] = 1;

        for(auto edge: prerequisites)
        {
            int a = edge[0], b = edge[1];
            if(b == node)
            {
                if(!vis[a])
                {
                    if(dfs(a, vis, prerequisites, ans))
                        return true;
                }
                else if(vis[a] == 1)
                    return true;
            }
        }
        // processed
        vis[node] = 2;
        ans.insert(ans.begin()+0, node);

        return false;
    }

    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
      
        vector<int> vis(numCourses, 0);
        vector<int> ans;
        for(int i=0; i<numCourses; i++)
        {
            if(!vis[i])
            {
                // iscycle
                if(dfs(i, vis, prerequisites,ans))
                    return vector<int>{};
            }
        }
        // notcycle, toposort exists
        return ans;
    }
};
