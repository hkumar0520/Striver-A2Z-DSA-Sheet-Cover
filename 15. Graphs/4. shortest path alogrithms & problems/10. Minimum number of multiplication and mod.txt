

class Solution {
  public:
    int minimumMultiplications(vector<int>& arr, int start, int end) {
        // code here
        queue<pair<long,long>> qtraverse;
        qtraverse.push({ 0, start});
        
        int mod = 100000;
        
        while(!qtraverse.empty())
        {
            pair<int,int> currNode = qtraverse.front();
            qtraverse.pop();
            
            int steps = currNode.first, node = currNode.second;
            
            if(node == end)
                return steps;
            for(int num: arr)
            {
                qtraverse.push({ steps+1, node*num % mod});
            }
        }
        return -1;
    }
};


#######################################################################################

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int minimumMultiplications(vector<int>& arr, int start, int end) {
        // code here
        vector<int> dist(100000, INT_MAX);
        queue<pair<long,long>> qtraverse;
        
        qtraverse.push({ 0, start });
        dist[start] = 0;
        
        int mod = 100000;
        
        while(!qtraverse.empty())
        {
            pair<int,int> currNode = qtraverse.front();
            qtraverse.pop();
            
            int steps = currNode.first, node = currNode.second;
            
            if(node == end)
                return steps;
            for(int num: arr)
            {
                int nextNum = node*num % mod;
                if(dist[nextNum] > steps + 1)
                {
                    dist[nextNum] = steps + 1;
                    qtraverse.push({ steps+1, node*num % mod});
                }
            }
        }
        return -1;
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        int start, end;
        cin >> start >> end;
        Solution obj;
        cout << obj.minimumMultiplications(arr, start, end) << endl;
    
cout << "~" << "\n";
}
}

// } Driver Code Ends

#######################################################################################
