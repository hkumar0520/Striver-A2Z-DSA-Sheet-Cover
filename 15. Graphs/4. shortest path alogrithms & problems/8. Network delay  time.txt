

// time limit exceed 47/54

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<int> dist(n+1, INT_MAX);
        queue<vector<int>> qtraverse;

        dist[k] = 0;
        qtraverse.push({ 0, k});

        while(!qtraverse.empty())
        {
            vector<int> frontNode = qtraverse.front();
            qtraverse.pop();

            int  distToNode = frontNode[0], node = frontNode[1];
            for(vector<int> curr: times)
            {
                int sourceNode = curr[0], destinationNode = curr[1], weight = curr[2];
                if( sourceNode == node && dist[destinationNode] >distToNode + weight)
                {
                    dist[destinationNode] = distToNode + weight;
                    qtraverse.push({ dist[destinationNode], destinationNode});
                }
            }
        }
        int  minTime = INT_MIN;
        for(int i=1;i<=n;i++)
        {
            if(dist[i] == INT_MAX)  return -1;
            minTime = max(minTime, dist[i]);
        }
        return minTime;
    }
};


#####################################################################################################

// 52/53 time limit exceed 


class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<int> dist(n+1, INT_MAX);
        priority_queue< vector<int> , vector<vector<int>>,
                        greater<vector<int>> > qtraverse;

        dist[k] = 0;
        qtraverse.push({ 0, k});

        while(!qtraverse.empty())
        {
            vector<int> frontNode = qtraverse.top();
            qtraverse.pop();

            int  distToNode = frontNode[0], node = frontNode[1];
            for(vector<int> curr: times)
            {
                int sourceNode = curr[0], destinationNode = curr[1], weight = curr[2];
                if( sourceNode == node && dist[destinationNode] >distToNode + weight)
                {
                    dist[destinationNode] = distToNode + weight;
                    qtraverse.push({ dist[destinationNode], destinationNode});
                }
            }
        }
        int  minTime = INT_MIN;
        for(int i=1;i<=n;i++)
        {
            if(dist[i] == INT_MAX)  return -1;
            minTime = max(minTime, dist[i]);
        }
        return minTime;
    }
};


################################################################################################

98 ms 

class Solution {
public:
    void getGraph(vector<vector<pair<int,int>>>& graph,
                    vector<vector<int>>& times)
    {
        for(vector<int> edge: times)
        {
            int start = edge[0], endd = edge[1], weight = edge[2];
            graph[start].push_back({ endd, weight });
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<vector<pair<int,int>>> graph(n+1);
        getGraph(graph, times);

        vector<int> dist(n+1, INT_MAX);
        queue<vector<int>> qtraverse;

        dist[k] = 0;
        qtraverse.push({ 0, k});

        while(!qtraverse.empty())
        {
            vector<int> frontNode = qtraverse.front();
            qtraverse.pop();

            int  distToNode = frontNode[0], node = frontNode[1];
            for(pair<int,int> curr: graph[node])
            {
                int destinationNode = curr.first, weight = curr.second;
                if( dist[destinationNode] >distToNode + weight)
                {
                    dist[destinationNode] = distToNode + weight;
                    qtraverse.push({ dist[destinationNode], destinationNode});
                }
            }
        }
        int  minTime = INT_MIN;
        for(int i=1;i<=n;i++)
        {
            if(dist[i] == INT_MAX)  return -1;
            minTime = max(minTime, dist[i]);
        }
        return minTime;
    }
};

######################################################################################

99 ms 

class Solution {
public:
    void getGraph(vector<vector<pair<int,int>>>& graph,
                    vector<vector<int>>& times)
    {
        for(vector<int> edge: times)
        {
            int start = edge[0], endd = edge[1], weight = edge[2];
            graph[start].push_back({ endd, weight });
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<vector<pair<int,int>>> graph(n+1);
        getGraph(graph, times);

        vector<int> dist(n+1, INT_MAX);
        priority_queue< vector<int> , vector<vector<int>>,
                        greater<vector<int>> > qtraverse;

        dist[k] = 0;
        qtraverse.push({ 0, k});

        while(!qtraverse.empty())
        {
            vector<int> frontNode = qtraverse.top();
            qtraverse.pop();

            int  distToNode = frontNode[0], node = frontNode[1];
            for(pair<int,int> curr: graph[node])
            {
                int destinationNode = curr.first, weight = curr.second;
                if( dist[destinationNode] >distToNode + weight)
                {
                    dist[destinationNode] = distToNode + weight;
                    qtraverse.push({ dist[destinationNode], destinationNode});
                }
            }
        }
        int  minTime = INT_MIN;
        for(int i=1;i<=n;i++)
        {
            if(dist[i] == INT_MAX)  return -1;
            minTime = max(minTime, dist[i]);
        }
        return minTime;
    }
};



####################################################################################

94ms


class Solution {
public:
    void getGraph(vector<vector<pair<int,int>>>& graph,
                    vector<vector<int>>& times)
    {
        for(vector<int> edge: times)
        {
            int start = edge[0], endd = edge[1], weight = edge[2];
            graph[start].push_back({ endd, weight });
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<vector<pair<int,int>>> graph(n+1);
        getGraph(graph, times);

        vector<int> dist(n+1, INT_MAX);
        priority_queue< vector<int> , vector<vector<int>>,
                        greater<vector<int>> > qtraverse;

        dist[k] = 0;
        qtraverse.push({ 0, k});

        while(!qtraverse.empty())
        {
            vector<int> frontNode = qtraverse.top();
            qtraverse.pop();

            int  distToNode = frontNode[0], node = frontNode[1];

            if(distToNode > dist[node])
                continue;
            for(pair<int,int> curr: graph[node])
            {
                int destinationNode = curr.first, weight = curr.second;
                if( dist[destinationNode] >distToNode + weight)
                {
                    dist[destinationNode] = distToNode + weight;
                    qtraverse.push({ dist[destinationNode], destinationNode});
                }
            }
        }
        int  minTime = INT_MIN;
        for(int i=1;i<=n;i++)
        {
            if(dist[i] == INT_MAX)  return -1;
            minTime = max(minTime, dist[i]);
        }
        return minTime;
    }
};

