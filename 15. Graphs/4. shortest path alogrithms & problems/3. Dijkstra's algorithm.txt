
// using set 

vector<int> dijkstra(vector<vector<pair<int, int>>> &adj, int src) {
        // Code here
        set<pair<int,int>> st;
        // sort on basis of pair.first
        st.insert({ 0, src});
        
        int n = adj.size();
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        while(!st.empty())
        {
            pair<int,int> nodeStep = *(st.begin());
            st.erase(st.begin());
            int steps = nodeStep.first, node = nodeStep.second;
            for(auto currnode: adj[node])
            {
                int v = currnode.first, wt = currnode.second;
                if(dist[v] > steps + wt)
                {
                    if(dist[v] != INT_MAX)
                        st.erase({dist[v],v});
                        
                    dist[v] = steps+wt;
                    st.insert({dist[v],v});
                }
            }
        }
        for(int  i=0;i<n;i++)
        {
            if(dist[i] == INT_MAX)
                dist[i] = -1;
        }
        return dist;
    }


###########################################################################################

using priority queue


vector<int> dijkstra(vector<vector<pair<int, int>>> &adj, int src) {
        // Code here
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> >pq;
        // sort on basis of pair.first element
        pq.push({ 0, src});
        
        int n = adj.size();
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        while(!pq.empty())
        {
            pair<int,int> nodeStep =pq.top();
            pq.pop();
            int steps = nodeStep.first, node = nodeStep.second;
            for(auto currnode: adj[node])
            {
                int v = currnode.first, wt = currnode.second;
                if(dist[v] > steps + wt)
                {
                    dist[v] = steps+wt;
                    pq.push({dist[v],v});
                }
            }
        }
        for(int  i=0;i<n;i++)
        {
            if(dist[i] == INT_MAX)
                dist[i] = -1;
        }
        return dist;
    }
