

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        
        vector<vector<int>> graph(n,vector<int>(n, 1e9));

        // bidirectional graph
        for(vector<int> edge: edges)
        {
            int src = edge[0], dst = edge[1], wt = edge[2];
            graph[src][dst] = wt;
            graph[dst][src] = wt;
        }
        // i==j, same vertex graph[i][i] = 0;
        for(int i=0;i<n;i++)
            graph[i][i] = 0;

        // floyd warshll algo
        for(int k=0;k<n;k++)
        {
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<n;j++)
                    graph[i][j] = min(graph[i][j], graph[i][k]+graph[k][j]);
            }
        }
        // calculation answer
        int minCitiesCount = INT_MAX, greateCityWithMinCount = 0;
        for(int i=0;i<n;i++)
        {
            int currCitiesCount = 0;
            for(int j=0;j<n;j++)
            {
                if(graph[i][j] <= distanceThreshold)
                    currCitiesCount++;
            }
            if(currCitiesCount < minCitiesCount)
            {
                minCitiesCount = currCitiesCount;
                greateCityWithMinCount = i;
            }
            else if(currCitiesCount == minCitiesCount)
                greateCityWithMinCount = i;
        }
        return greateCityWithMinCount;
    }
};


