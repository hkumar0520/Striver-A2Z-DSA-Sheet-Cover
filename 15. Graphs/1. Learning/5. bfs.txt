//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    
    vector<int> bfsOfGraph(vector<vector<int>> &adj) {
        // Code here
        vector<int> ans;
        int n = adj.size();
        // for particular element visited
        vector<int>  vis(n+1,0);
        queue<int> qtraverse;
        vis[0] = 1;
        qtraverse.push(0);
        while(!qtraverse.empty())
        {
            int node = qtraverse.front();
            qtraverse.pop();
            ans.push_back(node);
            for(auto v: adj[node])
            {
                if(!vis[v])
                {
                    vis[v] = 1;
                    qtraverse.push(v);
                }
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        // Now using vector of vectors instead of array of vectors
        vector<vector<int>> adj(V);

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u); // For undirected graph, add both u->v and v->u
        }

        Solution obj;
        vector<int> ans = obj.bfsOfGraph(adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends

##############################################################################

vector<int> bfsOfGraph(vector<vector<int>> &adj) {
        // Code here
        vector<int> ans;
        int n = adj.size();
        // for particular element visited
        vector<int>  vis(n+1,0);
        queue<int> qtraverse;
        vis[0] = 1;
        qtraverse.push(0);
        while(!qtraverse.empty())   // queue runs for O(n) {n nodes}
        {
            int node = qtraverse.front();
            qtraverse.pop();
            ans.push_back(node);
            for(auto v: adj[node])   //  for loop runs for total degrees O(2E) 
            {
                if(!vis[v])
                {
                    vis[v] = 1;
                    qtraverse.push(v);
                }
            }
        }
        return ans;
    }

    space complexity = O(3N) { vis, bfs, queue} = O(n)
    time complexity = O(N + 2E)