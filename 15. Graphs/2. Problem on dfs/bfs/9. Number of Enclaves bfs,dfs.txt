class Solution {
public:
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& vis,
             vector<int> startNode) {
        vis[startNode[0]][startNode[1]] = 1;

        int m = grid.size(), n = grid[0].size();
        int a[4] = {-1, 0, 1, 0};
        int b[4] = {0, 1, 0, -1};
        int x = startNode[0], y = startNode[1];
        for (int i = 0; i < 4; i++) {
            int nx = x + a[i];
            int ny = y + b[i];
            if (nx >= 0 && ny >= 0 && nx < m && ny < n && grid[nx][ny] &&
                !vis[nx][ny]) {
                dfs(grid, vis, {nx, ny});
            }
        }
    }
    void bfs(vector<vector<int>>& grid, vector<vector<int>>& vis,
             vector<int> startNode) {
        int m = grid.size(), n = grid[0].size();
        queue<vector<int>> qtraverse;
        vis[startNode[0]][startNode[1]] = 1;
        qtraverse.push(startNode);

        int a[4] = {-1, 0, 1, 0};
        int b[4] = {0, 1, 0, -1};

        while (!qtraverse.empty()) {
            vector<int> node = qtraverse.front();
            qtraverse.pop();
            int x = node[0], y = node[1];
            for (int i = 0; i < 4; i++) {
                int nx = x + a[i];
                int ny = y + b[i];
                if (nx >= 0 && ny >= 0 && nx < m && ny < n && grid[nx][ny] &&
                    !vis[nx][ny]) {
                    vis[nx][ny] = 1;
                    qtraverse.push({nx, ny});
                }
            }
        }
    }

    int numEnclaves(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        // check first and last row
        for (int j = 0; j < n; j++) {
            if (grid[0][j] && !vis[0][j])
                bfs(grid, vis, {0, j});
            if (grid[m - 1][j] && !vis[m - 1][j])
                bfs(grid, vis, {m - 1, j});
        }
        // check first and last col
        for (int i = 0; i < m; i++) {
            if (grid[i][0] && !vis[i][0])
                bfs(grid, vis, {i, 0});
            if (grid[i][n - 1] && !vis[i][n - 1])
                bfs(grid, vis, {i, n - 1});
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!vis[i][j] && grid[i][j])
                    ans++;
            }
        }
        return ans;
    }
};