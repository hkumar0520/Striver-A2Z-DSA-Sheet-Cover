// connected components

class Solution {
public:
    // all test cases passed  
    void bfs(int start,vector<vector<int>>& isConnected,vector<int>& vis)
    {
        int n = isConnected.size();
        queue<int> qtraverse;
        qtraverse.push(start);
        vis[start] = 1;
        while(!qtraverse.empty())
        {
            int  node = qtraverse.front();
            qtraverse.pop();
            for(int j = 0;j<n;j++)
            {
                if(isConnected[node][j] == 1 && !vis[j])
                {
                    qtraverse.push(j);
                    vis[j] = 1;
                }
            }
        }
    }
    // dfs all test cases passed
     void dfs(int start,vector<vector<int>>& isConnected,vector<int>& vis)
    {
        vis[start] = 1;
        for(int j = 0;j<isConnected.size();j++)
        {
            if(isConnected[start][j] == 1 && !vis[j])
            {
                dfs(j,isConnected,vis);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        
        int n = isConnected.size();
        vector<int> vis(n,0);
        int totalProvince = 0;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                totalProvince++;
                bfs(i,isConnected,vis);
                // dfs(i,isConnected,vis);
            }
        }
        return totalProvince;
    }
};


##########################################################################################

#include <bits/stdc++.h>
using namespace std;

class Solution {
  private: 
    // dfs traversal function 
    void dfs(int node, vector<int> adjLs[], int vis[]) {
        // mark the more as visited
        vis[node] = 1; 
        for(auto it: adjLs[node]) {
            if(!vis[it]) {
                dfs(it, adjLs, vis); 
            }
        }
    }
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        vector<int> adjLs[V]; 
        
        // to change adjacency matrix to list 
        for(int i = 0;i<V;i++) {
            for(int j = 0;j<V;j++) {
                // self nodes are not considered
                if(adj[i][j] == 1 && i != j) {
                    adjLs[i].push_back(j); 
                    adjLs[j].push_back(i); 
                }
            }
        }
        int vis[V] = {0}; 
        int cnt = 0; 
        for(int i = 0;i<V;i++) {
            // if the node is not visited
            if(!vis[i]) {
                // counter to count the number of provinces 
                cnt++;
               dfs(i, adjLs, vis); 
            }
        }
        return cnt; 
        
    }
};

int main() {
    
    vector<vector<int>> adj
    {
        {1, 0, 1},
        {0, 1, 0},
        {1, 0, 1}
    };

        
    Solution ob;
    cout << ob.numProvinces(adj,3) << endl;
        
    return 0;
}
Output: 2

Time Complexity: O(N) + O(V+2E), Where O(N) is for outer loop and inner loop runs in total a single DFS over entire graph, and we know DFS takes a time of O(V+2E). 

Space Complexity: O(N) + O(N),Space for recursion stack space and visited array.