//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution {
  public:
      void bfs(int start,vector<vector<int>>& adj,vector<int>& vis)
    {
        int n = adj.size();
        queue<int> qtraverse;
        qtraverse.push(start);
        vis[start] = 1;
        while(!qtraverse.empty())
        {
            int  node = qtraverse.front();
            qtraverse.pop();
            for(int j = 0;j<n;j++)
            {
                if(adj[node][j] == 1 && !vis[j])
                {
                    qtraverse.push(j);
                    vis[j] = 1;
                }
            }
        }
    }
     void dfs(int start,vector<vector<int>>& adj,vector<int>& vis)
    {
        vis[start] = 1;
        for(int j = 0;j<adj.size();j++)
        {
            if(adj[start][j] == 1 && !vis[j])
            {
                dfs(j,adj,vis);
            }
        }
    }
   
    int numProvinces(vector<vector<int>> adj, int V) {
        // code here
        
        int n = adj.size();
        vector<int> vis(n,0);
        int totalProvince = 0;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                totalProvince++;
                //dfs(i,adj,vis);
                bfs(i,adj,vis);
            }
        }
        return totalProvince;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int V,x;
        cin>>V;
        
        vector<vector<int>> adj;
        
        for(int i=0; i<V; i++)
        {
            vector<int> temp;
            for(int j=0; j<V; j++)
            {
                cin>>x;
                temp.push_back(x);
            }
            adj.push_back(temp);
        }
        

        Solution ob;
        cout << ob.numProvinces(adj,V) << endl;
    
cout << "~" << "\n";
}
    return 0;
}
// } Driver Code Ends