// not my code 

class Solution {
private:
	bool dfsCheck(int node, vector<int> adj[], int vis[], int pathVis[]) {
		vis[node] = 1;
		pathVis[node] = 1;

		// traverse for adjacent nodes
		for (auto it : adj[node]) {
			// when the node is not visited
			if (!vis[it]) {
				if (dfsCheck(it, adj, vis, pathVis) == true)
					return true;
			}
			// if the node has been previously visited
			// but it has to be visited on the same path
			else if (pathVis[it]) {
				return true;
			}
		}

		pathVis[node] = 0;
		return false;
	}
public:
	// Function to detect cycle in a directed graph.
	bool isCyclic(int V, vector<int> adj[]) {
		int vis[V] = {0};
		int pathVis[V] = {0};

		for (int i = 0; i < V; i++) {
			if (!vis[i]) {
				if (dfsCheck(i, adj, vis, pathVis) == true) return true;
			}
		}
		return false;
	}
};


int main() {

	// V = 11, E = 11;
	vector<int> adj[11] = {{}, {2}, {3}, {4, 7}, {5}, {6}, {}, {5}, {9}, {10}, {8}};
	int V = 11;
	Solution obj;
	bool ans = obj.isCyclic(V, adj);

	if (ans)
		cout << "True\n";
	else
		cout << "False\n";

	return 0;
}

##########################################################################################

code is correct but time is high 

Example , Graph with different connected components

1. 1->2->3->4->5
2. 6->7->8->9->10

****as vis array set false if cycle is not there,
	iscycle function calls for every node


bool iscycle(vector<int> adj[],int s,vector<bool>& vis)
{
    if(vis[s]==true)
         return true;
    vis[s]=true;
    for(auto it=adj[s].begin();it!=adj[s].end();it++)
    {
        if(iscycle(adj,*it,vis))
            return true;
    }
    vis[s]=false;
    return false;
}
bool isCyclic(int v, vector<int> adj[])
{
    // Your code here
    vector<bool> vis(v,false);
    for(int i=0;i<v;i++)
    {
        if((!vis[i])&&iscycle(adj,i,vis))
            return true;
    }
    return false;
}




