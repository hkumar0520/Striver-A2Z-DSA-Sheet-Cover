    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<int> vis(V, 0);
        priority_queue<vector<int> , vector<vector<int>> ,
                        greater<vector<int>> > pq;
                        
        
        // from parent to node weight, node  
        pq.push({ 0, 0});
        
        int minSum = 0;
        
        while(!pq.empty())
        {
            vector<int> currentNode = pq.top();
            pq.pop();
            
            int wt = currentNode[0], node = currentNode[1];
            
            if(vis[node])   continue;
            
            minSum = minSum + wt;
            vis[node] = 1;
            
            for(vector<int> edge: adj[node])
            {
                int dstNode = edge[0], wtDstNode = edge[1];
                if(!vis[dstNode])
                    pq.push({ wtDstNode, dstNode});
            }
        }
        return minSum;
    }

    time complexity = E*logE   
    logE = both push, pop operation of priority_queue
    space complextiy = O(V) + O(E) ( for the pq O(E))

################################################################################


int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<int> vis(V, 0);
        vector<vector<int>> mst;
        priority_queue<vector<int> , vector<vector<int>> ,
                        greater<vector<int>> > pq;
                        
        
        // from parent to node weight, node , parent 
        pq.push({ 0, 0, -1});
        
        int minSum = 0;
        
        while(!pq.empty())  // E
        {
            vector<int> currentNode = pq.top();  // logE
            pq.pop();
            
            int wt = currentNode[0], node = currentNode[1], parent = currentNode[2];
            
            if(vis[node])   continue;
            
            minSum = minSum + wt;
            vis[node] = 1;
            // edge from parent->node 
            if(parent != -1)
                mst.push_back({ parent, node});
            
            for(vector<int> edge: adj[node])  // E
            {
                int dstNode = edge[0], wtDstNode = edge[1];
                if(!vis[dstNode])  
                    pq.push({ wtDstNode, dstNode});  // logE
            }
        }
        return minSum;
    }

    time complexity = E*logE   
    logE = both push, pop operation of priority_queue
    space complextiy = O(V) + O(E) ( for the pq O(E))


    Time Complexity: O(E*logE) + O(E*logE)~ O(E*logE), where E = no. of given edges.
The maximum size of the priority queue can be E so after at most E iterations the priority queue will be empty and the loop will end. Inside the loop, there is a pop operation that will take logE time. This will result in the first O(E*logE) time complexity. Now, inside that loop, for every node, we need to traverse all its adjacent nodes where the number of nodes can be at most E. If we find any node unvisited, we will perform a push operation and for that, we need a logE time complexity. So this will result in the second O(E*logE). 

Space Complexity: O(E) + O(V), where E = no. of edges and V = no. of vertices. O(E) occurs due to the size of the priority queue and O(V) due to the visited array. If we wish to get the mst, we need an extra O(V-1) space to store the edges of the most.