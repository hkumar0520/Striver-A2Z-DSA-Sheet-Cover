
class DisjointSet{
    vector<int> rank, parent, size;
    
    public:
    
    DisjointSet(int V){
        rank.resize(V+1, 0);
        size.resize(V+1, 1);
        parent.resize(V+1,1);
        for(int i=0; i<=V; i++){
            parent[i] = i;
        }
    }
    
    int findParent(int x){
        if(x == parent[x])
            return  x;
        
        return parent[x] = findParent(parent[x]);
    }
    
    void unionByRank(int u, int v){
        
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if (ulp_u == ulp_v) return;
        
        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_u] = ulp_v;
            rank[ulp_v]++;
        }
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if (ulp_u == ulp_v) return;

        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector< pair<int,pair<int,int>> > edges;
        // O(V+E)
        for(int i=0; i<V; i++)
        {
            for(vector<int> edge: adj[i])
            {
                int endNode =  edge[0], wt = edge[1], startNode = i;
                edges.push_back({ wt, {startNode, endNode }});
            }
        }
        
        // ElogE
        sort(edges.begin(), edges.end());
        DisjointSet ds(V);
        
        int sumMst = 0;
        // E*4*alpha*2( 2 disjoint set operations)
        for(int i=0;i<edges.size();i++)
        {
            int wt = edges[i].first;
            int u = edges[i].second.first;
            int v = edges[i].second.second;
            if( ds.findParent(u) != ds.findParent(v) ){
                sumMst += wt;
                ds.unionBySize(u, v);
            }
        }
        return sumMst;

    }
};

time complexity = O(V+E) + O(ElogE) + O(E*4a*2)
space complexity = O(V) + O(V) + O(V) + O(E)
{
    v = rank,
    v = size,
    v = parent,
    E = for storing edges 
}

#############################################################################

// if want to calculate edges 

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class DisjointSet{
    vector<int> rank, parent, size;
    
    public:
    
    DisjointSet(int V){
        rank.resize(V+1, 0);
        size.resize(V+1, 1);
        parent.resize(V+1,1);
        for(int i=0; i<=V; i++){
            parent[i] = i;
        }
    }
    
    int findParent(int x){
        if(x == parent[x])
            return  x;
        
        return parent[x] = findParent(parent[x]);
    }
    
    void unionByRank(int u, int v){
        
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if (ulp_u == ulp_v) return;

        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_u] = ulp_v;
            rank[ulp_v]++;
        }
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if (ulp_u == ulp_v) return;

        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector< pair<int,pair<int,int>> > edges;
        for(int i=0; i<V; i++)
        {
            for(vector<int> edge: adj[i])
            {
                int endNode =  edge[0], wt = edge[1], startNode = i;
                edges.push_back({ wt, {startNode, endNode }});
            }
        }
        
        sort(edges.begin(), edges.end());
        DisjointSet ds(V);
        
        vector<vector<int>> edgesInMst;
        
        int sumMst = 0;
        for(int i=0;i<edges.size();i++)
        {
            int wt = edges[i].first;
            int u = edges[i].second.first;
            int v = edges[i].second.second;
            if( ds.findParent(u) != ds.findParent(v) ){
                sumMst += wt;
                ds.unionBySize(u, v);
                edgesInMst.push_back({ u, v});
            }
        }
        return sumMst;

    }
};



//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    
cout << "~" << "\n";
}

    return 0;
}


// } Driver Code Ends