

#include <bits/stdc++.h> 

struct Node{
    // by default links[26] is NULL for all 26 Node*
    Node* links[26];
    // no. words with ending nCount keeps count
    int nCount = 0;
    // with each char insert nCountStart increase
    int nCountStart = 0;

    bool isContainsKey(char ch)
    {
        return links[ch-'a'] != NULL;
    }

    void put(char ch, Node* node)
    {
        links[ch-'a'] = node;
    }

    Node* get(char ch)
    {
        return links[ch-'a'];
    }

    void incCount()
    {
        nCount++;
    }

    void decCount()
    {
        nCount--;
    }

    void incCountStart()
    {
        nCountStart++;
    }

    void decCountStart()
    {
        nCountStart--;
    }

    int  getCount()
    {
        return  nCount;
    }

    int getCountStart()
    {
        return nCountStart;
    }
};
class Trie{
    Node* root;
    public:

    Trie(){
        // Write your code here.
        root = new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node* curr = root;
        for(int i=0;i<word.size();i++)
        {
            if(!curr->isContainsKey(word[i]))
            {
                curr->put(word[i], new Node());
            }
            curr = curr->get(word[i]);
            // every countstart increase to keep no. of prefixes
            curr->incCountStart();
        }
        // no. of word increase with ending word
        curr->incCount();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node* curr = root;
        for(int i=0;i<word.size();i++)
        {
            if(!curr->isContainsKey(word[i]))   return 0;
            curr = curr->get(word[i]);
        }
        return curr->getCount();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node* curr = root;
        for(int i=0;i<word.size();i++)
        {
            if(!curr->isContainsKey(word[i]))   return 0;
            curr = curr->get(word[i]);
        }
        return curr->getCountStart();
    }

    void erase(string &word){
        // Write your code here.
        // in question given word to be erased should exist

        Node* curr = root;
        for(int i=0;i<word.size();i++)
        {
            // if one occurrence is there, should delete here
            if(curr->get(word[i])->getCountStart() == 1)
            {
                Node* nodeDel = curr->get(word[i]);
                curr->put(word[i], NULL);
                delete nodeDel;
                return ;
            }
            curr = curr->get(word[i]);
            curr->decCountStart();
        }
        curr->decCount();
    }
};
