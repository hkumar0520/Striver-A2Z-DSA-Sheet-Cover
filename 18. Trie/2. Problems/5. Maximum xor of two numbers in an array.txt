

struct Node{
    Node* links[2];
    bool flag = false;

    bool isContainsKey(int bit)
    {
        return links[bit] != NULL;
    }

    Node* get(int bit)
    {
        return links[bit];
    }

    void put(int bit, Node* node)
    {
        links[bit] = node;
    }

    bool getEnd(){
        return flag;
    }

    void setEnd(){
        flag = true;
    }
};

class Trie{
    Node* root;
    public:
    Trie(){
        root = new Node();
    }

    void insert(int num)
    {
        Node* curr = root;
        for(int i=31;i>=0;i--)
        {
            int bit = (num>>i) & 1;
            if(!curr->isContainsKey(bit))
            {
                curr->put(bit,new Node());
            }
            curr = curr->get(bit);
        }
        curr->setEnd();
    }

    int findXor(int num)
    {
        Node* curr = root;
        int result = 0;
        for(int i=31;i>=0;i--)
        {
            int bit = (num >> i) & 1;
            int oppositebit = 1-bit;
            if(curr->isContainsKey(oppositebit))
            {
                result = result | (1<<i);
                curr = curr->get(oppositebit);
            }
            else
            {
                curr = curr->get(bit);
            }
        }
        return result;
    }
};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie* trie = new Trie();

        for(int i=0;i<nums.size();i++)
            trie->insert(nums[i]);

        int maximum = 0;
        for(int i=0;i<nums.size();i++)
            maximum = max(maximum, trie->findXor(nums[i]));

        return maximum;
    }
};


### **Time Complexity**

#### **1. Trie Insertion (`insert`):**
- For each number, we traverse all 32 bits (assuming 32-bit integers).
- Each bit requires a constant amount of work (checking and inserting into the trie).
- Complexity per insertion: \( O(32) = O(1) \).
- For \( N \) numbers in the input array `nums`, total complexity: \( O(N) \).

#### **2. XOR Query (`findXor`):**
- For each number, we traverse all 32 bits.
- Each bit requires a constant amount of work (checking and navigating the trie).
- Complexity per query: \( O(32) = O(1) \).
- For \( N \) numbers in the input array `nums`, total complexity: \( O(N) \).

#### **3. Maximum XOR Calculation:**
- Iterates through the array `nums` and performs a `findXor` operation for each element.
- Total complexity: \( O(N) \).

#### **Overall Time Complexity:**
- Insertion: \( O(N) \).
- XOR Queries: \( O(N) \).
- Total: \( O(N) \).

---

### **Space Complexity**

#### **1. Trie Structure:**
- Each node in the trie can have up to 2 children (binary trie for 0 and 1).
- For \( N \) numbers, the trie will have at most \( O(32 \times N) = O(N) \) nodes, as each number requires up to 32 levels, and unique prefixes create new nodes.

#### **2. Additional Space:**
- The algorithm uses a constant amount of space for variables and temporary storage.
- Space for the result is negligible compared to the trie size.

#### **Overall Space Complexity:**
- Dominated by the trie: \( O(N) \).

---

### **Summary**

- **Time Complexity:** \( O(N) \), where \( N \) is the size of the input array `nums`.
- **Space Complexity:** \( O(N) \), for the trie structure.