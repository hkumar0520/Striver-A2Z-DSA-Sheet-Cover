learn this for trie 

struct Node{
    // by default links[26] is NULL for all 26 Node*, no need to initialze null
    // cannot write this Node* links[2] = NULL, giving error;
    Node* links[26];
    bool flag = false;

    bool isContainsKey(char ch){
        return links[ch-'a'] != NULL;
    }

    void put(char ch,Node* node)
    {
        links[ch-'a'] = node;
    }

    Node* get(char ch)
    {
        return links[ch-'a'];
    }

    void setEnd(){
        flag = true;
    }

    bool getEnd(){
        return flag;
    }

};

################################################################################

// simple

struct Node{
    Node* links[26];
    bool flag = false;

    bool isContainsKey(char ch){
        return links[ch-'a'] != NULL;
    }

    void put(char ch,Node* node)
    {
        links[ch-'a'] = node;
    }

    Node* get(char ch)
    {
        return links[ch-'a'];
    }

    void setEnd(){
        flag = true;
    }

    bool getEnd(){
        return flag;
    }

};
class Trie {
private:
    Node* root;
public:
    Trie() {
        root = new Node();
        
    }
    
    void insert(string word) {
        Node *curr = root;
        for(int i=0;i<word.size();i++)
        {
            if(!curr->isContainsKey(word[i]))
            {
                curr->put(word[i],new Node());
            }
            curr = curr->get(word[i]);
        }
        curr->setEnd();
    }
    
    bool search(string word) {
        Node *curr = root;
        for(int i=0;i<word.size();i++)
        {
            if(!curr->isContainsKey(word[i])) return false;
            curr = curr->get(word[i]);
        }
        return curr->getEnd();
    }
    
    bool startsWith(string prefix) {
        Node *curr = root;
        for(int i=0;i<prefix.size();i++)
        {
            if(!curr->isContainsKey(prefix[i])) return false;
            curr = curr->get(prefix[i]);
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */




### **Time Complexity**

#### **1. Insertion (`insert` method):**
- For each word of length \( L \), we traverse through all its characters to insert them into the trie.
- Each character is processed in \( O(1) \), as the alphabet size is constant (\( 26 \) for lowercase English letters).
- If there are \( N \) words, the total time complexity for insertion is:
  \[
  O(N \times L)
  \]
  where \( L \) is the average length of the words.

#### **2. Search (`search` method):**
- Searching for a word of length \( L \) requires traversing through \( L \) characters.
- For a single search, the time complexity is \( O(L) \).
- If multiple searches are performed, the total time complexity is proportional to the number of searches.

#### **3. Prefix Search (`startsWith` method):**
- Similar to `search`, prefix search also takes \( O(L) \), where \( L \) is the length of the prefix.

---

### **Space Complexity**

#### **1. Trie Structure:**
- Each node in the trie has \( 26 \) links (pointers) for lowercase English letters.
- In the worst case, if all \( N \) words are unique and completely distinct, the trie will have \( \sum_{i=1}^N L_i \) nodes, where \( L_i \) is the length of the \( i \)-th word.
- The total space required for the trie is:
  \[
  O(N \times L)
  \]
  where \( L \) is the average word length.

#### **2. Auxiliary Space:**
- Temporary variables used during traversal are constant and do not depend on the input size.
- The space for input words and queries is not included in the trieâ€™s space complexity.

---

### **Summary**

- **Time Complexity:**
  - Insertion: \( O(N \times L) \)
  - Search: \( O(L) \) per query
  - Prefix Search: \( O(L) \) per query
- **Space Complexity:** \( O(N \times L) \), for the trie structure.









 ##################################################################################

class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie*node=this;
        for(auto ch:word)
        {
            if(!node->next.count(ch))
                node->next[ch]=new Trie();
            node=node->next[ch];
        }
        node->isword=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie*node=this;
        for(auto ch:word)
        {
            if(!node->next.count(ch))
                return false;
            node=node->next[ch];
        }
        return node->isword;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie*node=this;
        for(auto ch:prefix)
        {
            if(!node->next.count(ch))
                return false;
            node=node->next[ch];
        }
        return true;
    }
    private:
    map<char,Trie*> next={};
    bool isword=false;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */



