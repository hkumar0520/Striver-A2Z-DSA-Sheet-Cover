For a sorted array 'arr', 'lower_bound' of a number 'x' is defined as the smallest 
index 'idx' such that the value 'arr[idx]' is not less than 'x'
If all numbers are smaller than 'x', then 'n' should be the 'lower_bound' of 'x', 
where 'n' is the size of array.

// recursion


void f(vector<int> arr, int x, int i, int j, int &ans)
{
	if(i>j)
		return ;
	
	int mid = (i+j)/2;
	if(arr[mid] >= x)
	{
		ans = mid;
		f(arr,x,i,mid-1,ans);
	}
	else
		f(arr,x,mid+1,j,ans);
	
}
int lowerBound(vector<int> arr, int n, int x) {
	// Write your code here
	if(x>arr[n-1])
		return n;

	int ans = 0;

	f(arr,x,0,n-1,ans);
	return ans;
}



################################################################################################

// iteration 

int lowerBound(vector<int> arr, int n, int x) {
	// Write your code here
	if(x>arr[n-1])
		return n;
	int i = 0, j = n-1, ans = 0;
	while(i<=j)
	{
		int mid = (i+j)/2;
		if(arr[mid] >= x)
		{
			ans = mid;
			j = mid-1;
		}
		else
			i = mid+1;
	}
	return ans;
}




