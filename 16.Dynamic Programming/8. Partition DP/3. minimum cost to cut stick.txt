

class Solution {
public:
    int f(int start, int endd, vector<int>& cuts)
    {
        if((start == endd) || ((start + 1) == endd) )   return 0;

        int minn = INT_MAX;
        for(int i=0; i<cuts.size();i++)
        {
            if(cuts[i]>=(start+1) && cuts[i]<=(endd-1))
            {
                int cost = (endd-start) + f(start,cuts[i],cuts)+f(cuts[i],endd,cuts);
                minn = min(cost,minn);
            }
        }
        return minn != INT_MAX? minn: 0;
    }
    int minCost(int n, vector<int>& cuts) {
        return f(0,n,cuts);
    }
};


###############################################################################################
// memoization, memory limit exceed

class Solution {
public:
    int f(int start, int endd, vector<int>& cuts,vector<vector<int>>& dp)
    {
        if((start == endd) || ((start + 1) == endd) )   return 0;

        if(dp[start][endd] != -1)   return dp[start][endd];

        int minn = INT_MAX;
        for(int i=0; i<cuts.size();i++)
        {
            if(cuts[i]>=(start+1) && cuts[i]<=(endd-1))
            {
                int cost = (endd-start) + f(start,cuts[i],cuts,dp)+f(cuts[i],endd,cuts,dp);
                minn = min(cost,minn);
            }
        }
        return dp[start][endd] = (minn != INT_MAX? minn: 0) ;
    }
    int minCost(int n, vector<int>& cuts) {
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        return f(0,n,cuts,dp);
    }
};


###############################################################################################
// tabular


int f(int ind, int n, vector<int> price, vector<vector<int>> dp)
{
	// if(ind == 0) return n*price[ind];
	for(int i=0;i<n+1;i++)
		dp[0][i] = i*price[0];
	
	for(int i=1;i<n;i++)
	{
		for(int j=0;j<n+1;j++)
		{
			int notpick = dp[i-1][j];
			int pick = 0;
			if((i+1)<=j)
				pick = price[i] +dp[i][j-(i+1)];

			dp[i][j] = max(notpick, pick);
		}
	}
	
	return dp[n-1][n];
}

int cutRod(vector<int> &price, int n)
{
	// Write your code here.
	vector<vector<int>> dp(n,vector<int>(n+1,-1));
	return f(n-1, n, price, dp);
}



###############################################################################################
// optimization
