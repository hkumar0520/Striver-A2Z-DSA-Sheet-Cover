
// recursion 

long long mod = 1000000007;
int f(int n,int m,vector< vector< int> > &mat)
{
    if(n==0 && m==0)    return 1;
    if(n<0 || m<0)      return 0;

    if(mat[n][m] == -1) return 0;
    
    int up = f(n-1,m,mat)%mod;
    int left = f(n,m-1,mat)%mod;

    return (up + left)%mod;
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    
    return f(n-1,m-1,mat);
}

###############################################################################################

// memoization,
long long mod = 1000000007;
int f(int n,int m,vector< vector< int> > &mat,vector< vector< int> > &dp)
{
    if(n==0 && m==0)    return 1;
    if(n<0 || m<0)      return 0;

    if(mat[n][m] == -1) return 0;
    
    if(dp[n][m] != -1)  return dp[n][m];

    int up = f(n-1,m,mat,dp)%mod;
    int left = f(n,m-1,mat,dp)%mod;


    return dp[n][m] = (up + left)%mod;
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    
    vector<vector<int>> dp(n,vector<int>(m,-1));
    return f(n-1,m-1,mat,dp);

}

###############################################################################################

// optimized 
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    long long mod = 1000000007;
    vector<int> dp(m, 0);
    if(mat[0][0] == -1)
        return 0;
    else
        dp[0] = 1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(mat[i][j] == -1)
                dp[j]=0;
            else
            {
                if(j>0)
                    dp[j] = (dp[j]%mod + dp[j-1]%mod)%mod;
            }
        }
    }
    return dp[m-1];
}