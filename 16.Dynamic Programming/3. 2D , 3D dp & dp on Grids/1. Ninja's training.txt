

// using recursion


int f(int ind, vector<vector<int>> points, int nonPick)
{
    if(ind < 0)
        return 0;

    int indexOne = (nonPick+1)%3;
    int indexTwo = (nonPick+2)%3;
    int pickOne = points[ind][indexOne] + f(ind-1,points,indexOne);
    int picktwo = points[ind][indexTwo] + f(ind-1,points,indexTwo);

    return max(pickOne,picktwo);

}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    int pickOne = points[n-1][0]  + f(n-2,points, 0);
    int picktwo = points[n-1][1]  + f(n-2,points, 1);
    int pickthree = points[n-1][2]  + f(n-2,points, 2);
    return max(pickOne, max(picktwo, pickthree));
}


###############################################################################################

// memoization, 6/11, 43/80

int f(int ind, vector<vector<int>> points, int nonPick, vector<vector<int>>& dp)
{
    if(ind < 0)
        return 0;

    if(dp[ind][nonPick]!=-1)
        return dp[ind][nonPick];

    int indexOne = (nonPick+1)%3;
    int indexTwo = (nonPick+2)%3;
    
    int pickOne = points[ind][indexOne] + f(ind-1,points,indexOne, dp);
    int picktwo = points[ind][indexTwo] + f(ind-1,points,indexTwo, dp);

    return dp[ind][nonPick] = max(pickOne,picktwo);

}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int>> dp(n,vector<int>(3,-1));
    int pickOne = points[n-1][0]  + f(n-2,points, 0, dp);
    int picktwo = points[n-1][1]  + f(n-2,points, 1, dp);
    int pickthree = points[n-1][2]  + f(n-2,points, 2, dp);
    return max(pickOne, max(picktwo, pickthree));
}

###############################################################################################

int f(int ind, vector<vector<int>> points, int nonPick, vector<vector<int>>& dp)
{
    if(nonPick == -1)
    {
        int pickOne = points[ind][0]  + f(ind-1,points, 0, dp);
        int picktwo = points[ind][1]  + f(ind-1,points, 1, dp);
        int pickthree = points[ind][2]  + f(ind-1,points, 2, dp);
        return max(pickOne, max(picktwo, pickthree));
    }

    if(ind < 0)
        return 0;

    if(dp[ind][nonPick]!=-1)
        return dp[ind][nonPick];

    int indexOne = (nonPick+1)%3;
    int indexTwo = (nonPick+2)%3;
    
    int pickOne = points[ind][indexOne] + f(ind-1,points,indexOne, dp);
    int picktwo = points[ind][indexTwo] + f(ind-1,points,indexTwo, dp);

    return dp[ind][nonPick] = max(pickOne,picktwo);

}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int>> dp(n,vector<int>(3,-1));
    return f(n-1, points, -1, dp);
}

#############################################################################################################

tabular approach

#include<bits/stdc++.h>
int ninjaTraining(int n, vector<vector<int>> &points) 
{
    if(n==1)
        return max(points[0][0],max(points[0][1],points[0][2]));
    int  maximum = INT_MIN;
    for(int i=n-2;i>=0;i--)
    {
        points[i][0] += max(points[i+1][1],points[i+1][2]);
        points[i][1] += max(points[i+1][0],points[i+1][2]);
        points[i][2] += max(points[i+1][0],points[i+1][1]);
        maximum = max( points[i][0],max( points[i][1], points[i][2]));
    }
    return maximum;

}

##########################################################
same as above

#include<bits/stdc++.h>
int ninjaTraining(int n, vector<vector<int>> &points) 
{
    int  maximum = max(points[0][0],max(points[0][1],points[0][2]));
    for(int i=n-2;i>=0;i--)
    {
        points[i][0] += max(points[i+1][1],points[i+1][2]);
        points[i][1] += max(points[i+1][0],points[i+1][2]);
        points[i][2] += max(points[i+1][0],points[i+1][1]);
        maximum = max( points[i][0],max( points[i][1], points[i][2]));
    }
    return maximum;

}