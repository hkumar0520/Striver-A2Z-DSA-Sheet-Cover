
1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
3, If p.charAt(j) == '*': 
   here are two sub conditions:
               1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty
               2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
                              dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a 
                           or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a
                           or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty

// similar to wildcard matching 
// recursion

class Solution {
public:
    bool isAllStars(string pattern, int n)
    {
        // s ="aab",p ="c*a*b"
        for(int i=0;i<=n;i++)
        {
            if(pattern[i] != '*' && !((i+1<=n) && pattern[i+1] == '*') )   return false;
        }
        return true;
    }
    bool f(string p, int ind1, string s, int ind2)
    {
        if(ind1<0 && ind2<0)    return true;
        if(ind1<0 && ind2>=0)    return false;
        if(ind1>=0 && ind2<0)   return isAllStars(p,ind1);

        if(p[ind1] == s[ind2] || p[ind1] == '.')
            return f(p,ind1-1,s,ind2-1);
        else
        {
            if(p[ind1] == '*')
            {
                bool condition2 = ((ind1-1) >=0) ? ((p[ind1-1] == s[ind2])||(p[ind1-1] == '.')) : false;
                bool skiptwoelement =  f(p,ind1-2,s,ind2);
                bool skiponelement =  condition2 && (f(p,ind1,s,ind2-1)||f(p,ind1-1,s,ind2));
                return skiptwoelement || skiponelement;
            }
        }
        return false;
    }
    bool isMatch(string s, string p) {
        return f(p,p.size()-1,s,s.size()-1);
    }
};

// #############################################################################################
// memoization

class Solution {
public:
bool isAllStars(string pattern, int n)
{
   // s ="aab",p ="c*a*b"
   // p = c*, s =0 return true
   for(int i=0;i<=n;i++)
   {
      if(pattern[i] != '*' && !((i+1<=n) && pattern[i+1] == '*') )   return false;
   }
   return true;
}
    bool f(string p, int ind1, string s, int ind2,vector<vector<int>>& dp)
    {
        if(ind1<0 && ind2<0)    return true;
        if(ind1<0 && ind2>=0)    return false;
        if(ind1>=0 && ind2<0)   return isAllStars(p,ind1);

        if(dp[ind1][ind2] != -1)    return dp[ind1][ind2];

        if(p[ind1] == s[ind2] || p[ind1] == '.')
            return dp[ind1][ind2] = f(p,ind1-1,s,ind2-1,dp);
        else
        {
            if(p[ind1] == '*')
            {
                bool condition2 = ((ind1-1) >=0) ? ((p[ind1-1] == s[ind2])||(p[ind1-1] == '.')) : false;
                bool skiptwoelement =  f(p,ind1-2,s,ind2,dp);
                bool skiponelement =  condition2 && (f(p,ind1,s,ind2-1,dp)||f(p,ind1-1,s,ind2,dp));
                return dp[ind1][ind2] = (skiptwoelement || skiponelement);
            }
        }
        return dp[ind1][ind2] = false;
    }
    bool isMatch(string s, string p) {
        int m = p.size(), n = s.size();
        vector<vector<int>> dp(m, vector<int>(n,-1));
        return f(p,m-1,s,n-1,dp);
    }
};















