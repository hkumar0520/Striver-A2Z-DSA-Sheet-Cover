

// recursion 

int f(int ind1, string s, int ind2, string t)
{
	if(ind1<0 || ind2<0)	return 0;

	if(s[ind1] == t[ind2])	return 1+f(ind1-1,s,ind2-1,t);

	return max(f(ind1-1,s,ind2,t),f(ind1,s,ind2-1,t));
}
int lcs(string s, string t)
{
	//Write your code here
	int m = s.size();
	int n = t.size();

	return f(m-1,s, n-1, t);
}

###############################################################################################

// memoization


#include <bits/stdc++.h>

int f(int ind1, string s, int ind2, string t, vector<vector<int>> &dp)
{
	if(ind1<0 || ind2<0)	return 0;

	if(dp[ind1][ind2]!= -1)	return dp[ind1][ind2];

	if(s[ind1] == t[ind2])	return 1+f(ind1-1,s,ind2-1,t, dp);

	return dp[ind1][ind2] = max(f(ind1-1,s,ind2,t,dp),f(ind1,s,ind2-1,t,dp));
}
int lcs(string s, string t)
{
	//Write your code here
	int m = s.size();
	int n = t.size();
	vector<vector<int>> dp(m,vector<int>(n,-1));

	return f(m-1,s, n-1, t,dp);
}


###############################################################################################
// tabulation


#include <bits/stdc++.h>

int f(int m, string s, int n, string t, vector<vector<int>> &dp)
{
    for(int i=1;i<m+1;i++)
    {
        for(int j=1;j<n+1;j++)
        {
            if(s[i-1] == t[j-1])
                dp[i][j] = dp[i-1][j-1]+1;
            else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
        }
    }
	return  dp[m][n];
}
int lcs(string s, string t)
{
	//Write your code here
	int m = s.size();
	int n = t.size();
	vector<vector<int>> dp(m+1,vector<int>(n+1,0));

	return f(m,s, n, t,dp);
}

###############################################################################################
// optimization


#include <bits/stdc++.h>

int f(int m, string s, int n, string t, vector<int> &dp)
{
    for(int i=1;i<m+1;i++)
    {
		vector<int> temp = dp;
        for(int j=1;j<n+1;j++)
        {
            if(s[i-1] == t[j-1])
                temp[j] = dp[j-1]+1;
            else
                temp[j] = max(dp[j], temp[j-1]);
        }
		dp = temp;
    }
	return  dp[n];
}
int lcs(string s, string t)
{
	//Write your code here
	int m = s.size();
	int n = t.size();
	vector<int> dp(n+1,0);

	return f(m,s, n, t,dp);
}