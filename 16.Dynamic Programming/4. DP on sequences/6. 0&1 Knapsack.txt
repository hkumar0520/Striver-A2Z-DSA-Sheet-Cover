

// recursion

#include <bits/stdc++.h> 

int f(int ind, int maxWeight, vector<int> value, vector<int> weight)
{
	if(maxWeight == 0) 	return 0;
	if(ind == 0)
		return (maxWeight >= weight[ind]) ? value[ind]: 0;

	int nonPick = f(ind-1, maxWeight, value, weight);
	int pick = 0;
	if(weight[ind] <= maxWeight)
		pick = value[ind] + f(ind-1, maxWeight-weight[ind], value, weight);

	return max(nonPick, pick);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here

	return f(n-1,maxWeight, value, weight);
}


###############################################################################################

// memoization

#include <bits/stdc++.h> 

int f(int ind, int maxWeight, vector<int> value, vector<int> weight, vector<vector<int>> &dp)
{
	if(maxWeight == 0) 	return 0;
	if(ind == 0)
		return (maxWeight >= weight[ind]) ? value[ind]: 0;

	if(dp[ind][maxWeight] != -1)	return dp[ind][maxWeight];

	int nonPick = f(ind-1, maxWeight, value, weight, dp);
	int pick = 0;
	if(weight[ind] <= maxWeight)
		pick = value[ind] + f(ind-1, maxWeight-weight[ind], value, weight, dp);

	return dp[ind][maxWeight]= max(nonPick, pick);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here

	vector<vector<int>> dp(n, vector<int>(maxWeight+1, -1));

	return f(n-1,maxWeight, value, weight, dp);
}


###############################################################################################
// tabular 

#include <bits/stdc++.h> 

int f(int n, int maxWeight, vector<int> value, vector<int> weight, vector<vector<int>> &dp)
{

	// maxWeight == 0 , return 0
	for(int i=0;i<n;i++)
		dp[i][0] = 0;

	// 	if(ind ==0 ) return (maxWeight >= weight[ind]) ? value[ind]: 0;
	for(int i=weight[0];i< (maxWeight+1);i++)
		dp[0][i] = value[0];

	for(int i=1;i<n;i++)
	{
		for(int j = 1; j < maxWeight+1;j++)
		{
			int nonPick = dp[i-1][j];
			int pick = 0;
			if(j>=weight[i])
				pick = value[i] + dp[i-1][j-weight[i]];

			dp[i][j] = max(nonPick, pick);
		}
	}

	return dp[n-1][maxWeight];
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here

	vector<vector<int>> dp(n, vector<int>(maxWeight+1, 0));

	return f(n,maxWeight, value, weight, dp);
}

###############################################################################################

// optimized
#include <bits/stdc++.h> 

int f(int n, int maxWeight, vector<int> value, vector<int> weight, vector<int> &dp)
{

	// maxWeight == 0 , return 0
	dp[0] = 0;

	// 	if(ind ==0 ) return (maxWeight >= weight[ind]) ? value[ind]: 0;
	for(int i=weight[0];i< (maxWeight+1);i++)
		dp[i] = value[0];

	for(int i=1;i<n;i++)
	{
		vector<int> temp = dp;
		for(int j = 1; j < maxWeight+1;j++)
		{
			int nonPick = dp[j];
			int pick = 0;
			if(j>=weight[i])
				pick = value[i] + dp[j-weight[i]];

			temp[j] = max(nonPick, pick);
		}
		dp = temp;
	}

	return dp[maxWeight];
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	// Write your code here

	vector<int>dp (maxWeight+1, 0);

	return f(n,maxWeight, value, weight, dp);
}