
// recursion

long f(int ind, int value, int *denominations)
{
    if(ind == 0)
        return ((value % denominations[ind]) ==0 ) ? 1 : 0;

    int notpick = f(ind-1, value, denominations);
    int pick = 0;
    if(denominations[ind]<= value)
        pick = f(ind, value-denominations[ind], denominations);

    return pick + notpick;
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    return f(n-1, value, denominations);
}


###############################################################################################
// memoization


#include <bits/stdc++.h>

long f(int ind, int value, int *denominations, vector<vector<long>> &dp)
{
    if(ind == 0)
        return ((value % denominations[ind]) ==0 ) ? 1 : 0;

    if(dp[ind][value] != -1)    return dp[ind][value];

    long notpick = f(ind-1, value, denominations, dp);
    long pick = 0;
    if(denominations[ind]<= value)
        pick = f(ind, value-denominations[ind], denominations, dp);

    return dp[ind][value] = (pick + notpick);
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    vector<vector<long>> dp(n, vector<long>(value+1,-1));
    return f(n-1, value, denominations, dp);
}

###############################################################################################
// tabular approach

#include <bits/stdc++.h>

long f(int n, int value, int *denominations, vector<vector<long>> &dp)
{

    // if(ind == 0)
    //     return ((value % denominations[ind]) ==0 ) ? 1 : 0;
    for(int i=0;i<value+1;i++)
    {   
        if(i%denominations[0] == 0) 
            dp[0][i] = 1;
    }

    for(int i=1;i<n;i++)
    {
        for(int j=0;j<value+1;j++)
        {
            long notpick = dp[i-1][j];
            long pick = 0;
            if(denominations[i]<=j)
                pick = dp[i][j-denominations[i]];

            dp[i][j] = (pick + notpick);
        }
    }
    return dp[n-1][value];
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    vector<vector<long>> dp(n, vector<long>(value+1,0));
    return f(n, value, denominations, dp);
}


###############################################################################################
// optimization


#include <bits/stdc++.h>

long f(int n, int value, int *denominations,  vector<long> &dp)
{

    // if(ind == 0)
    //     return ((value % denominations[ind]) ==0 ) ? 1 : 0;
    for(int i=0;i<value+1;i++)
    {   
        if(i%denominations[0] == 0) 
            dp[i] = 1;
    }

    for(int i=1;i<n;i++)
    {
        for(int j=0;j<value+1;j++)
        {
            long notpick = dp[j];
            long pick = 0;
            if(denominations[i]<=j)
                pick = dp[j-denominations[i]];

            dp[j] = (pick + notpick);
        }
    }
    return dp[value];
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    vector<long> dp(value+1,0);
    return f(n, value, denominations, dp);
}



