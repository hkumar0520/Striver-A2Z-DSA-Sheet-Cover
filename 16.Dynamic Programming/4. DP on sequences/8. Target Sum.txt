
// optimiation , same as 5 the question

#include <bits/stdc++.h> 

int f(int ind, int target, vector<int> &arr, vector<vector<int>> &dp)
{
    if (ind == 0) 
    {
        if(target == 0 && arr[ind] == 0)
            return 2;
        if(target == 0 || target == arr[ind])
            return 1;
        
        return 0;
    }

	if(dp[ind][target] != -1)	return dp[ind][target];
   

    int nonPick = f(ind-1, target,arr,dp);
    int pick = 0;
    if(arr[ind]<=target)
        pick = f(ind-1, target-arr[ind], arr,dp);

    return dp[ind][target] = (pick + nonPick);
}


int targetSum(int n, int target, vector<int>& arr) {
    // Write your code here.
    int totalsum = 0;
    for(int i=0;i<n;i++)
        totalsum += arr[i];

    if((totalsum-target) < 0)    return 0;
    if((totalsum-target)%2 ==1)        return 0;
    
    int k = (totalsum-target)/2;

    vector<vector<int>> dp(n, vector<int>(k+1,-1));

    return f(n-1,k,arr,dp);
}
