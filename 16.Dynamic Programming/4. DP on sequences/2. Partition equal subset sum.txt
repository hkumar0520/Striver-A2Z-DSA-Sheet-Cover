// same as 1st question, so same 'f' function used, optimized space

bool f(int n, int k, vector<int> &arr, vector<bool> &dp)
{
    // target =0 
    dp[0] = true;
    if(arr[0]<= k)
        dp[arr[0]] = true;

    for(int i=1;i<n;i++)
    {
        vector<bool> temp(k+1,false);
        temp[0] = true;
        for(int j=1;j<k+1;j++)
        {
            bool nottaken = dp[j];
            bool taken = false;
            if(arr[i]<=j)
                taken = dp[j-arr[i]];

            temp[j] = taken || nottaken;
        }
        dp = temp;
    }

    return  dp[k];
}
bool canPartition(vector<int> &arr, int n)
{
	// Write your code here.
	int sum = 0;
	for(int i=0;i<n;i++)
		sum += arr[i];
	
	if(sum % 2 !=0)
		return false;

	int k = sum/2;
	vector<bool> dp(k+1, false);
	return f(n, k, arr, dp);
}
