
#include <bits/stdc++.h>

int f(int arr[], int n)
{
    vector<int> temp;
    temp.push_back(arr[0]);
    int len = 1;

    for(int i=1;i<n;i++)
    { 
        if(arr[i]>temp.back())
        {
            temp.push_back(arr[i]);
            len++;
        }
        else
        {
            int lbind  = lower_bound(temp.begin(),temp.end(),arr[i])-temp.begin();
            temp[lbind] = arr[i];
        }
    }

   
    return len;
}

int longestIncreasingSubsequence(int arr[], int n) {
    // Create a 2D DP array initialized to -1
    
    return f(arr,n);
}
