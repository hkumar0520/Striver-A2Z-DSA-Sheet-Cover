

vector<int> f(vector<int> arr, int n)
{
    vector<int> dp(n,1);
	vector<int> hash(n,-1);
    int maxAns = INT_MIN;

    sort(arr.begin(),arr.end());

    for(int i=1;i<n;i++)
    {
        for(int j=i-1;j>=0;j--)
        {
            if((arr[i]%arr[j] == 0) || (arr[j]%arr[i]==0))
			{
				if((dp[j]+1)>dp[i])
				{
                	dp[i] = dp[j]+1;
					hash[i] = j;
				}
			}
        }
        maxAns = max(maxAns, dp[i]);
    }
	vector<int> ans;
	for(int i=0;i<n;i++)
	{
		if(dp[i] == maxAns)
		{
			while(i>=0)
			{
				ans.push_back(arr[i]);
				i = hash[i];
			}
			break;
		}
	}
	reverse(ans.begin(),ans.end());
	return ans;
}

vector<int> divisibleSet(vector<int> &arr)
{
    // Write your code here.
    return f(arr,arr.size());
}