

###############################################################################################
// O(n) approach

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size(), prev2 = 0, prev = nums[0];

        // for nums[0,n-2]
        for(int i=1;i<n-1;i++)
        {
            int pick = nums[i];
            if(i>1)
                pick += prev2;
            int nonpick = prev;
            int curr = max(pick , nonpick);
            prev2 = prev;
            prev = curr;
        }
        // in case of 1 element
        if(n==1)   
            return prev;
        int maximum = prev;
        prev2 = 0, prev = nums[1];
        
        // for nums[1,n-1]
        for(int i=2;i<n;i++)
        {
            int pick = nums[i];
            if(i>2)
                pick += prev2;
            int nonpick = prev;
            int curr = max(pick , nonpick);
            prev2 = prev;
            prev = curr;
        }
        return max(maximum,prev);
    }
};